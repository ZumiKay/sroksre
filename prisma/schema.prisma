// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  EDITOR
}

enum ImgStatus {
  TEMP
  USED
}

enum Imagetemptype {
  COVER
  BANNER
}

model User {
  id           Int            @id @default(autoincrement())
  oauthId      String?
  type         String?
  firstname    String
  lastname     String?
  email        String
  role         Role           @default(USER)
  phonenumber  String?        @unique
  password     String         @unique
  whislist     Json?
  vfy          String?
  products     Products[]
  questions    Questions[]
  sessions     Usersession[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  addresses    Address[]
  Orders       Orders[]
  Notification Notification[]
  Wishlist     Wishlist[]
  Orderproduct Orderproduct[]
  Tempimage    Tempimage[]
}

model Wishlist {
  id      Int      @id @default(autoincrement())
  pid     Int
  uid     Int
  user    User     @relation(fields: [uid], references: [id])
  product Products @relation(fields: [pid], references: [id])
}

model Address {
  id         Int      @id @default(autoincrement())
  firstname  String   @default("")
  lastname   String   @default("")
  street     String?
  houseId    String
  province   String
  district   String
  songkhat   String
  postalcode String
  userId     Int?
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Orders     Orders[]
}

model Usersession {
  session_id String   @id @default(uuid())
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  expireAt   DateTime
}

model Parentcategories {
  id             Int               @id @default(autoincrement())
  name           String
  type           String?           @default("normal")
  pid            Int?
  description    String?
  sub            Childcategories[]
  products       Products[]
  autocategories Productcategory[]
}

model Childcategories {
  id                 Int               @id @default(autoincrement())
  name               String
  type               String?           @default("normal")
  pid                Int?
  Parentcategories   Parentcategories? @relation(fields: [parentcategoriesId], references: [id])
  parentcategoriesId Int?
  Products           Products[]
}

model Products {
  id                Int               @id @default(autoincrement())
  name              String
  price             Float             @default(0.00)
  description       String            @default("")
  stocktype         String            @default("stock")
  stock             Int?
  covers            Productcover[]
  details           Info[]
  parentcategory_id Int?
  childcategory_id  Int?
  order_id          String?
  review_id         Int?
  amount_sold       Int?              @default(0)
  amount_incart     Int?              @default(0)
  amount_wishlist   Int?              @default(0)
  promotion_id      Int?
  discount          Float?
  promotion         Promotion?        @relation(fields: [promotion_id], references: [id], onDelete: SetNull)
  parentcateogries  Parentcategories? @relation(fields: [parentcategory_id], references: [id])
  childcategories   Childcategories?  @relation(fields: [childcategory_id], references: [id])
  Variant           Variant[]
  Stock             Stock[]
  Orderproduct      Orderproduct[]
  relatedproductId  Int?
  relatedproduct    Producttype?      @relation(fields: [relatedproductId], references: [id])
  User              User?             @relation(fields: [userId], references: [id])
  userId            Int?
  Wishlist          Wishlist[]
  Containeritems    Containeritems[]
  Autocategory      Productcategory[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model Productcategory {
  id              Int              @id @default(autoincrement())
  product_id      Int
  autocategory_id Int
  product         Products         @relation(fields: [product_id], references: [id])
  autocategory    Parentcategories @relation(fields: [autocategory_id], references: [id])
}

model Productcover {
  id        Int      @id @default(autoincrement())
  url       String
  name      String
  type      String
  Products  Products @relation(fields: [productId], references: [id])
  productId Int
}

model Tempimage {
  id      Int    @id @default(autoincrement())
  name    String
  user_id Int
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Producttype {
  id        Int        @id @default(autoincrement())
  productId Json
  Products  Products[]
}

model Orders {
  id           String         @id
  buyer_id     Int
  status       String
  estimate     DateTime?
  price        Json
  shippingtype String         @default("Normal")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  shipping_id  Int?
  shipping     Address?       @relation(fields: [shipping_id], references: [id])
  user         User           @relation(fields: [buyer_id], references: [id], onDelete: Cascade)
  Orderproduct Orderproduct[]
}

model Orderproduct {
  id        Int      @id @default(autoincrement())
  productId Int
  user_id   Int
  status    String   @default("incart")
  quantity  Int
  details   Json?
  orderId   String?
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  order     Orders?  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Banner {
  id                 Int              @id @default(autoincrement())
  name               String
  type               String
  size               String           @default("large")
  linktype           String?
  image              Json
  parentcate_id      Int?
  childcate_id       Int?
  selectedproduct_id Json?
  link               String?
  createdAt          DateTime         @default(now())
  Promotion          Promotion?       @relation(fields: [id], references: [banner_id])
  Containeritems     Containeritems[]
  promotionId        Int?             @unique
}

model Homecontainer {
  id             Int              @id @default(autoincrement())
  idx            Int
  type           String
  name           String?
  scrollabletype String?
  amountofitem   Int?
  daterange      Json?
  item           Containeritems[]
  createdAt      DateTime         @default(now())
  updateAt       DateTime         @updatedAt
}

model Containeritems {
  id              Int            @id @default(autoincrement())
  homecontainerId Int?
  banner_id       Int?
  product_id      Int?
  banner          Banner?        @relation(fields: [banner_id], references: [id], onDelete: Cascade)
  product         Products?      @relation(fields: [product_id], references: [id], onDelete: Cascade)
  createdAt       DateTime       @default(now())
  Homecontainer   Homecontainer? @relation(fields: [homecontainerId], references: [id], onDelete: Cascade)
}

model Promotion {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  banner_id   Int?       @unique
  banner      Banner?
  expireAt    DateTime
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Products    Products[]
}

model Answers {
  id          Int       @id @default(autoincrement())
  answer      String
  question_id Int
  question    Questions @relation(fields: [question_id], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Questions {
  id        Int       @id @default(autoincrement())
  question  String
  answer_id Int
  user_id   Int
  user      User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  answers   Answers[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Info {
  id         Int       @id @default(autoincrement())
  info_title String
  info_value Json
  info_type  String
  product_id Int?
  product    Products? @relation(fields: [product_id], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Variant {
  id              Int               @id @default(autoincrement())
  product_id      Int?
  product         Products?         @relation(fields: [product_id], references: [id], onDelete: Cascade)
  option_title    String
  option_type     String
  option_value    Json
  Varianttemplate Varianttemplate[]

  @@map("variant")
}

model Varianttemplate {
  id         Int     @id @default(autoincrement())
  variant_id Int
  variant    Variant @relation(fields: [variant_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Stock {
  id         Int          @id @default(autoincrement())
  product_id Int
  product    Products     @relation(fields: [product_id], references: [id])
  Stockvalue Stockvalue[]

  @@map("stock")
}

model Stockvalue {
  id          Int      @id @default(autoincrement())
  qty         Int
  variant_val Json
  stockId     Int
  stock       Stock    @relation(fields: [stockId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updateAt    DateTime @updatedAt
}

model Question {
  id        Int      @id @default(autoincrement())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Policy {
  id        Int         @id @default(autoincrement())
  title     String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Paragraph Paragraph[]
  showtype  String?
}

model Paragraph {
  id        Int      @id @default(autoincrement())
  title     String?
  policyId  Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  policy    Policy   @relation(fields: [policyId], references: [id], onDelete: Cascade)
}

model Notification {
  id        Int      @id @default(autoincrement())
  type      String
  content   String
  checked   Boolean? @default(false)
  link      String?
  userid    Int
  user      User     @relation(fields: [userid], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
